<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <link rel="stylesheet" href="lib/bootstrap/dist/css/bootstrap.min.css">
  <script src="lib/jQuery/dist/jquery.js"></script>
  <script src="lib/bootstrap/dist/js/bootstrap.min.js"></script>
  <title>Document</title>
  <style>
  html {
    height: 100%
  }
  body {
    margin: 0;
    height: 100%;
    background: #fff;
  }
  canvas {
    display: block;
    width: 100%;
    height: 100%;
  }
   .name-err{
        color:red;
    }
    .hidden{
        display:none!important;
    }
    .password-err{
        color:red;
    }
    .content{
    	position:absolute;
    	height:400px;
    	width:300px;
    	left:50%;
    	top:50%;
    	margin-left:-150px;
    	margin-top:-170px;
    }
    .btn{
    	width:100%;
    }
  </style>
</head>

<body>
  		<canvas id="canvas"></canvas>

  		<div class="content">
  			<div class="form-group">
	            <label for="name" class="control-label">用户名:</label>
	          
	            <input type="text" class="form-control" id="name" name="name" required autocomplete="off" placeholder="Username">
	            <div class="name-err hidden ">用户名不存在</div>
       		</div>
       		<div class="form-group">
	            <label for="password" class="control-label">密码:</label>
	            <input type="password" class="form-control" id="password"  name="password" required autocomplete="off" placeholder="Password">
	            <div class="password-err hidden">密码错误</div>
        	</div>
	        <div class="form-group ">
	            <button class="btn btn-success login">登录</button>
	        </div>
  		</div>
        
  <script>
  // 参考资料：https://github.com/sunshine940326/canvas-nest
  class Circle {
    //创建对象
    //以一个圆为对象
    //设置随机的 x，y坐标，r半径，_mx，_my移动的距离
    //this.r是创建圆的半径，参数越大半径越大
    //this._mx,this._my是移动的距离，参数越大移动
    constructor(x, y) {
      this.x = x;
      this.y = y;
      this.r = Math.random() * 10;
      this._mx = Math.random();
      this._my = Math.random();
    }
    //canvas 画圆和画直线
    //画圆就是正常的用canvas画一个圆
    //画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理
    drawCircle(ctx) {
      ctx.beginPath();
      //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。
      ctx.arc(this.x, this.y, this.r, 0, 360)
      ctx.closePath();
      ctx.fillStyle = 'rgba(204, 204, 204, 0.3)';
      ctx.fill();
    }
    drawLine(ctx, _circle) {
      let dx = this.x - _circle.x;
      let dy = this.y - _circle.y;
      let d = Math.sqrt(dx * dx + dy * dy)
      if (d < 150) {
        ctx.beginPath();
        //开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线：
        ctx.moveTo(this.x, this.y); //起始点
        ctx.lineTo(_circle.x, _circle.y); //终点
        ctx.closePath();
        ctx.strokeStyle = 'rgba(204, 204, 204, 0.3)';
        ctx.stroke();
      }
    }
    // 圆圈移动
    // 圆圈移动的距离必须在屏幕范围内
    move(w, h) {
      this._mx = (this.x < w && this.x > 0) ? this._mx : (-this._mx);
      this._my = (this.y < h && this.y > 0) ? this._my : (-this._my);
      this.x += this._mx / 2;
      this.y += this._my / 2;
    }
  }
  //鼠标点画圆闪烁变动
  class currentCirle extends Circle {
    constructor(x, y) {
      super(x, y)
    }
    drawCircle(ctx) {
      ctx.beginPath();
      //注释内容为鼠标焦点的地方圆圈半径变化
      //this.r = (this.r < 14 && this.r > 1) ? this.r + (Math.random() * 2 - 1) : 2;
      this.r = 8;
      ctx.arc(this.x, this.y, this.r, 0, 360);
      ctx.closePath();
      //ctx.fillStyle = 'rgba(0,0,0,' + (parseInt(Math.random() * 100) / 100) + ')'
      ctx.fillStyle = 'rgba(255, 77, 54, 0.6)'
      ctx.fill();
    }
  }
  //更新页面用requestAnimationFrame替代setTimeout
  window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
  let canvas = document.getElementById('canvas');
  let ctx = canvas.getContext('2d');
  let w = canvas.width = canvas.offsetWidth;
  let h = canvas.height = canvas.offsetHeight;
  let circles = [];
  let current_circle = new currentCirle(0, 0)
  let draw = function() {
    ctx.clearRect(0, 0, w, h);
    for (let i = 0; i < circles.length; i++) {
      circles[i].move(w, h);
      circles[i].drawCircle(ctx);
      for (j = i + 1; j < circles.length; j++) {
        circles[i].drawLine(ctx, circles[j])
      }
    }
    if (current_circle.x) {
      current_circle.drawCircle(ctx);
      for (var k = 1; k < circles.length; k++) {
        current_circle.drawLine(ctx, circles[k])
      }
    }
    requestAnimationFrame(draw)
  }
  let init = function(num) {
    for (var i = 0; i < num; i++) {
      circles.push(new Circle(Math.random() * w, Math.random() * h));
    }
    draw();
  }
  window.addEventListener('load', init(60));
  window.onmousemove = function(e) {
    e = e || window.event;
    current_circle.x = e.clientX;
    current_circle.y = e.clientY;
  }
  window.onmouseout = function() {
    current_circle.x = null;
    current_circle.y = null;
  }


   $(".form-control").on("focus",function(){
                $(".name-err").addClass("hidden");
                $(".password-err").addClass("hidden");
            });

            $(".login").on("click",function(){
                $.ajax({
                    url:'/signin',
                    type:"post",
                    data:{
                      name:$("#name").val(),
                      password:$("#password").val()
                   },
                    success:function(data){
                        if(data["check"] == "name-err"){
                            $(".name-err").removeClass("hidden");
                        } else if (data["check"] == "password-err"){
                            $(".password-err").removeClass("hidden");
                        } else {
                            window.location.href = "/";
                        }
                    }
                })
            })



  </script>
</body>

</html>